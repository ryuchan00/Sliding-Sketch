# 入ってくるコード
init do
  c1 ← x
  c2 ← y 
  count[1...c1, 1...c2] ← 0 # Count-Min Sketch
  # 0を持たないように改良する
  array element_count # 新たなSketch,arrayの宣言のみ
  更新間隔 ← δ # δ:element_countを更新する間隔
  t ← 0 # 経過時間
  hash(行数,要素)関数を定義，hash関数は引数を受け取り，{x|1≦x≦c2}を返す関数
end init

upon <Sample | j> do # Sampleは文字列，1文字ずつ取り出してjに代入してイテレーション
  t ← t + 1
  initialize_element
  for i = 1 to c1 do
    update(j)
  end for
end upon

struct Frequency
  int key
  int count ← 0
end struct

fucntion LinearSearch(array, target)
  for i = 1 to array.size
    if (array[i].key = target)
      return i
    end if
    return -1
  end for
end function

function GetFrequency(j)
  return min{ count[i,hash(i,j)] + element_count[j] | 1≦i≦c1 }
end function

function update(j)
  # element_countのkeyを探す方法は今は線形探索で設計してみる
  target_key ← LinearSearch(element_count, j)
  if (target_key != -1) then # target_keyが見つかったら
    element_count[target_key].count ← element_count[target_key].count + 1
  else
    Frequency = new Frequency{ key: j, count: 0 }
    element_count.push ← Frequency
  end if
end function

function initialize_element_count # elemnt_countの値をcountへ代入する
  if (t % 更新間隔 = 0) then
    for i = 1 to c1 do
      Frequency_confirmations[1...c2] ← 0
      for k = 1 to element_count.size do
        # Frequency_confirmations[1...c2]
        # キャッシュの衝突を検知したい
        key ← element_count[k].key
        Frequency_confirmations[hash(i,key)] ← 
            max(Frequency_confirmations[hash(i,key)], element_count[k].count)
      end for

      for k = 1 to Frequency_confirmations.size do
        if (Frequency_confirmations[k] != 0) then
          # element_count[k] ← element_count[k] + Frequency_confirmations[k]
          count[k] ← count[k] + Frequency_confirmations[k]
          # count[?][k] ← count[?][k] + Frequency_confirmations[k] なのでは？
        end if
      end for
      Frequency_confirmations[1...c2] ← 0
    end for
    array element_count # 再initialize
  end if
end function

#出ていくコード
#按分する方法
必要なメソッド
時間が来たらnew->oldへ移す
これはSSと同様
それとは別に補正スケッチからCMSに移すときに按分が必要である

まずは按分の計算式を作る
按分は
経過時間/1日の長さ
で按分できる．
これはコードだとどの変数に当たるのか
経過時間はnum % cycle
1日はcycle
これで求まる．つまり
num % cycle / cycle
これで1日の経過時間が出る

すでにnew->oldに移っているものとする

ゼロに更新する部分と...(これはそのままでよさそう)
for(;last_time < num;++last_time){
  counter[clock_pos].count[(cycle_num + 1) % field_num] = 0;
  clock_pos = (clock_pos + 1) % len;
  if(clock_pos == 0){
    cycle_num = (cycle_num + 1) % field_num;
  }
}

correction_countを按分する部分...
for (int j = 0; j < row_length; j++) {
  if (frequency_confirmations[j] > 0) {
    counter[j + i * row_length].count[0] = counter[j + i * row_length].count[0] + frequency_confirmations[j];
  }
}

最後に更新された時刻を残しておく必要がある
5000の時間で更新する，スピードが違うカウンターがあるので
何周期というは
5000を過ぎていればB_oldにすべてを書き込めばいい
もうちょっと整理しよう


最後にリセットされたタイミングが分かれば...
b_new,b_old,last_reset_timeの三つの構造体が必要そう
Clock_Goのタイミングでlast_reset_timeをリセットする

num % cycleが5000以下だったら按分
そうでなかったらすべてoldへ